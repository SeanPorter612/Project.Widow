#pragma once

// -----------------------------------------------------------
// -----------------------------------------------------------
// Begin of theory 3D/4D vector class
#ifndef __WI_Vector__
#define __WI_Vector__

//////////////////////////////////////////////////////////////////////
// -------------------------------------------------------------------
// begin of the actual vector class
class WI_Vector4
{
public:
	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// Constructors

	//////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// init by 4 float points default 0, 0, 0, 1
	WI_Vector4 ( const WI_Float x = 0.0f,
			    const WI_Float y = 0.0f,
			    const WI_Float z = 0.0f,
			    const WI_Float w = 1.0f );

	//////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// init by float pointer
	WI_Vector4 ( const WI_Float *ptr );

public:
	////////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// meathods

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// sets this vector
	void Set ( WI_Float X, WI_Float Y, WI_Float Z, WI_Float W );

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// scales a vector by Scalar
	WI_Vector4 Scale ( WI_Float S ) const;

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// component wise multiplication
	WI_Vector4 CompProduct ( const WI_Vector4 &A ) const;

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// returns this vector's cross product of vV
	WI_Vector4 Cross ( const WI_Vector4 &B ) const;

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// returns a vector's dot product
	WI_Float Dot ( const WI_Vector4 &A ) const;

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// computes the normal of a vector by a vector
	WI_Vector4 Normalize ( );

public:
	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// operators

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// index of
	WI_Float& operator [ ] ( int i );	// returns a float of an index of 0 - 3
	const WI_Float& operator [ ] ( int i ) const;	// sets a float val by index of 0 - 3

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// addition
	WI_Vector4 operator  + ( const WI_Vector4 &A ) const;
	WI_Vector4 &operator += ( const WI_Vector4 &A );
	WI_Vector4 &operator += ( const WI_Float &F );

	WI_Vector4 &operator ++ ( );

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// subtraction
	WI_Vector4 operator  - ( const WI_Vector4 &A ) const;
	WI_Vector4 &operator -= ( const WI_Vector4 &A );
	WI_Vector4 &operator -= ( const WI_Float &F );

	WI_Vector4 &operator -- ( );

	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// multiplication
	WI_Vector4 operator  * ( const WI_Float scalar ) const;
	WI_Vector4 &operator *= ( const WI_Float scalar );

public:
	//////////////////////////////////////////////////////////////////////
	// -------------------------------------------------------------------
	// common data members of a 4D vector

	WI_Float x; // float x point
	WI_Float y; // float y point
	WI_Float z; // float z point
	WI_Float w; // float w angle
};
// end of the actual vector class
// -------------------------------------------------------------------
// -------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#pragma message ( "		Widow 4D vector class..." )
#endif